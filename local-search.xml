<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二次函数计算器</title>
    <link href="/2022/08/19/%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <url>/2022/08/19/%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>这是一个使用Python语言编写的程序。目前包括[①获得该函数图像 ②分析函数 ③为段值列表 ⨀更换函数重新运行]四项功能。调用了三个库，分别是time、matplotlib.pyplot、numpy。思路是将各个功能做成以Def定义的部分，方便被主程序调用，而且还可以通过“自己调用自己”的方式做到循环的目的。以下篇幅将列举出每个模块部分。</p><h2 id="Def定义"><a href="#Def定义" class="headerlink" title="Def定义"></a>Def定义</h2><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3><p>输入一般式ax^2+bx+c中的a、b、c三个系数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Copy">def key_input():<br>global a<br>a=float(input(&quot;a=&quot;))<br>global b<br>b = float(input(&quot;b=&quot;))<br>global c<br>c = float(input(&quot;c=&quot;))<br></code></pre></td></tr></table></figure><p>极其简单的语句，<del>我当时第一遍的时候忘了用global让它变成全局变量，然后就报了一次错</del></p><h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><p>二次函数的一般式ax^2+bx+c，其中a(二次项系数)的正负决定了函数开口的方向，即可判断方向。一般式中二次函数的顶点为(-b&#x2F;2a ，(4ac-b^2)&#x2F;4a)，同时x&#x3D;-b&#x2F;2a是函数的对称轴，即得。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs copy">def Funcation_analysis():<br>print(&quot;二次函数——函数分析&quot;)<br><br>x_apex=-(b/(2*a))<br>y_apex=(((4*a*c)-(b**2))/(4*a))<br>print(&quot;函数顶点(%f,%f)&quot;%(x_apex,y_apex))<br><br><br>function_x=-(b/(2*a))<br>print(&quot;函数对称轴x=&quot;,function_x)<br><br><br>if a&gt;0:<br>print(&quot;∵a&gt;0 ∴函数存在最小值——当x=%f或y=%f时&quot;%(x_apex,y_apex))<br>print(&quot;∴二次函数开口向上，最大值不存在&quot;)<br>else:<br>print(&quot;∵a&lt;0 ∴函数存在最大值——当x=%f或y=%f时&quot; % (x_apex, y_apex))<br>print(&quot;∴二次函数开口向下，最小值不存在&quot;)<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>输入起始值、终止值、步进值，经过判断后执行 int((终止值 - 起始值)&#x2F; 步进值) 次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs copy">def Funcation_list_X():<br>print(&quot;输入仅保留三位小数&quot;)<br>x_start = round(float(input(&quot;x起始点&quot;)),3)<br>x_finish = round(float(input(&quot;x终止点&quot;)),3)<br>l = round(float(input(&quot;x轴步进值&quot;)),3)<br>if x_finish&lt;x_start:<br>print(&quot;终止值x必须小于初始值x&quot;)<br>Funcation_list_X()<br>else:<br>while int((x_finish - x_start)/l):<br>print(&quot;(%f,%f)&quot;%(x_start,a*x_start**2+b*x_start+c))<br>x_start = x_start + l<br>print(&quot;(%f,%f)&quot;%(x_start,a*x_start**2+b*x_start+c))<br></code></pre></td></tr></table></figure><p><del>一定要注意print的用法，我之前误用%d了，结果就是小数值被取整结果就不对了</del></p><h3 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h3><p>通过 import matplotlib.pyplot as plt 与 import numpy 绘制函数图像，import time 可用可不用，这里我只是使用它统计加载时间，仅绘图可去掉时间统计部份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs copy">def Painting_Funcation():<br>global t_s #(时间统计)设置全局变量<br>t_s=time.perf_counter() #启用时间统计<br>x=numpy.linspace(-40,40,100) #设置绘制范围及步进<br>y=a*x**2+b*x+c #设置解析式<br>plt.plot(x, y) #调用库进行绘制<br>plt.xlabel(&quot;X&quot;)<br>plt.ylabel(&quot;Y&quot;)<br>global t_f<br>t_f = time.perf_counter() #(时间统计)<br>t_n = t_f - t_s #计算时间差值<br>t_n = round(t_n, 3) #(对浮点时间数据进行位数保留)<br>print(&quot;完成,用时%f秒&quot; % (t_n))<br>print(&quot;关闭matplotlib窗口以进行下一循环&quot;)<br>plt.show() #显示调用后的绘制窗口<br></code></pre></td></tr></table></figure><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><p>简简单单的询问逻辑，这里体现了上文中提到的”自己调用自己”。<br>注意:第10行的Funcation_analysis()加载出的plt绘制窗口只有关闭才会继续向下执行main()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs copy">def main():<br>Answer=int(input(&quot;①获得该函数图像 ②分析函数 ③为段值列表 ⨀更换函数重新运行 ***(选项外任意键)结束程序***,键入数字以进行操作=&quot;))<br>try:<br>if Answer==1:<br>Painting_Funcation()<br>print(&quot;已关闭&quot;)<br>main()<br><br>elif Answer==2:<br>Funcation_analysis()<br>main()<br><br>elif Answer==3:<br>Funcation_list_X()<br>main()<br><br>elif Answer==3:<br>main()<br><br>elif Answer==0:<br>print(&quot;请输入二次函数一般式，以进行下一步操作&quot;)<br>key_input() #重新输入一般式，实现更换值重复运行<br>main()<br><br>except:<br>exit(0)<br><br>#_Main_<br>print(&quot;请输入二次函数一般式，以进行下一步操作&quot;)<br>key_input()<br>main()<br></code></pre></td></tr></table></figure><p>到这里已经可以实现基本的功能了。<del>如果加入新的功能，未来将会更新文章</del></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>这里附上源码，<del>使用的时候注意自己是否已经安装被import的库</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs Copy">import time<br>import matplotlib.pyplot as plt<br>import numpy<br><br><br>def key_input():<br>global a<br>a=float(input(&quot;a=&quot;))<br>global b<br>b = float(input(&quot;b=&quot;))<br>global c<br>c = float(input(&quot;c=&quot;))<br>def Funcation_analysis():<br>print(&quot;二次函数——函数分析&quot;)<br><br>x_apex=-(b/(2*a))<br>y_apex=(((4*a*c)-(b**2))/(4*a))<br>print(&quot;函数顶点(%f,%f)&quot;%(x_apex,y_apex))<br><br><br>function_x=-(b/(2*a))<br>print(&quot;函数对称轴x=&quot;,function_x)<br><br><br>if a&gt;0:<br>print(&quot;∵a&gt;0 ∴函数存在最小值——当x=%d或y=%s时&quot;%(x_apex,y_apex))<br>print(&quot;∴二次函数开口向上，最大值不存在&quot;)<br>else:<br>print(&quot;∵a&lt;0 ∴函数存在最大值——当x=%d或y=%s时&quot; % (x_apex, y_apex))<br>print(&quot;∴二次函数开口向下，最小值不存在&quot;)<br>def Funcation_list_X():<br>print(&quot;输入仅保留三位小数&quot;)<br>x_start = round(float(input(&quot;x起始点&quot;)),3)<br>x_finish = round(float(input(&quot;x终止点&quot;)),3)<br>l = round(float(input(&quot;x轴步进值&quot;)),3)<br>if x_finish&lt;x_start:<br>print(&quot;终止值x必须小于初始值x&quot;)<br>Funcation_list_X()<br>else:<br>while int((x_finish - x_start)/l):<br>print(&quot;(%f,%f)&quot;%(x_start,a*x_start**2+b*x_start+c))<br>x_start = x_start + l<br>print(&quot;(%f,%f)&quot;%(x_start,a*x_start**2+b*x_start+c))<br>def Painting_Funcation():<br>global t_s<br>t_s=time.perf_counter()<br>x=numpy.linspace(-40,40,100)<br>y=a*x**2+b*x+c<br>plt.plot(x, y)<br>plt.xlabel(&quot;X&quot;)<br>plt.ylabel(&quot;Y&quot;)<br>global t_f<br>t_f = time.perf_counter()<br>t_n = t_f - t_s<br>t_n = round(t_n, 3)<br>print(&quot;完成,用时%f秒&quot; % (t_n))<br>print(&quot;关闭matplotlib窗口以进行下一循环&quot;)<br>plt.show()<br><br><br><br><br>def main():<br>Answer=int(input(&quot;①获得该函数图像 ②分析函数 ③为段值列表 ⨀更换函数重新运行 ***(选项外任意键)结束程序***,键入数字以进行操作=&quot;))<br>try:<br>if Answer==1:<br>Painting_Funcation()<br>print(&quot;已关闭&quot;)<br>main()<br><br>elif Answer==2:<br>Funcation_analysis()<br>main()<br><br>elif Answer==3:<br>Funcation_list_X()<br>main()<br><br>elif Answer==3:<br>main()<br><br>elif Answer==0:<br>print(&quot;请输入二次函数一般式，以进行下一步操作&quot;)<br>key_input()<br>main()<br><br>except:<br>exit(0)<br><br>#_Main_<br>print(&quot;请输入二次函数一般式，以进行下一步操作&quot;)<br>key_input()<br>main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo示例文件</title>
    <link href="/2022/08/14/hello-world/"/>
    <url>/2022/08/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
